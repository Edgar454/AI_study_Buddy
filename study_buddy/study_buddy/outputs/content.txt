Introduction
------------

Bitcoin is a decentralized digital currency that enables instant payments to anyone, anywhere in the world. It was created by an unknown person or group of people using the name Satoshi Nakamoto and released as open-source software in 2009. Bitcoin is unique in that there are a finite number of them: 21 million.

Bitcoin transactions are made with no middlemen, meaning, no banks. Transactions are made directly from person to person, and are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain.

Main Sections
-------------

### 1. Introduction

* Bitcoin is a decentralized digital currency that enables instant payments to anyone, anywhere in the world.
* It was created by an unknown person or group of people using the name Satoshi Nakamoto and released as open-source software in 2009.
* Bitcoin is unique in that there are a finite number of them: 21 million.
* Bitcoin transactions are made with no middlemen, meaning, no banks. Transactions are made directly from person to person, and are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain.

### 2. Transactions

* A transaction is a transfer of value between Bitcoin wallets that gets included in the blockchain.
* Bitcoin wallets keep a secret piece of data called a private key or seed, which is used to sign transactions, providing a mathematical proof that they have come from the owner of the wallet.
* The signature also prevents the transaction from being altered by anybody once it has been issued.
* All transactions are broadcast between users and confirmed by the network in the following minutes, through a process called mining.

### 3. Timestamp Server

* The timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post.
* The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash.
* Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.

### 4. Proof-of-Work

* To implement a distributed timestamp server on a peer-to-peer basis, a proof-of-work system similar to Adam Back's Hashcash is used.
* The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits.
* The average work required is exponential in the number of zero bits required and can be verified by executing a single hash.

### 5. Network

* The steps to run the network are as follows:
	1. New transactions are broadcast to all nodes.
	2. Each node collects new transactions into a block.
	3. Each node works on finding a difficult proof-of-work for its block.
	4. When a node finds a proof-of-work, it broadcasts the block to all nodes.
	5. Nodes accept the block only if all transactions in it are valid and not already spent.
	6. Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.

### 6. Incentive

* By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block.
* This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them.
* The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation.

### 7. Reclaiming Disk Space

* Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space.
* To facilitate this without breaking the block's hash, transactions are hashed in a Merkle Tree, with only the root included in the block's hash.
* Old blocks can then be compacted by stubbing off branches of the tree.

### 8. Simplified Payment Verification

* It is possible to verify payments without running a full network node.
* A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he's convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it's timestamped in.
* He can't check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.

### 9. Combining and Splitting Value

* Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer.
* To allow value to be split and combined, transactions contain multiple inputs and outputs.
* Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.

### 10. Privacy

* The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party.
* The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous.
* The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone.

### 11. Calculations

* We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.
* Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker.
* Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them.
* An attacker can only try to change one of his own transactions to take back money he recently spent.

### 12. Conclusion

* We have proposed a system for electronic transactions without relying on trust.
* We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending.
* To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power.
* The network is robust in its unstructured simplicity.
* Nodes work all at once with little coordination.
* They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis.
* Nodes can leave and rejoin the network at will, accepting the proof-of-work chain as proof of what happened while they were gone.
* They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them.
* Any needed rules and incentives can be enforced with this consensus mechanism.

Conclusion
----------

Bitcoin is a decentralized digital currency that enables instant payments to anyone, anywhere in the world. It was created by an unknown person or group of people using the name Satoshi Nakamoto and released as open-source software in 2009. Bitcoin is unique in that there are a finite number of them: 21 million. Bitcoin transactions are made with no middlemen, meaning, no banks. Transactions are made directly from person to person, and are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain.

References
----------

* [Bitcoin: A Peer-to-Peer Electronic Cash System](https://bitcoin.org/bitcoin.pdf)
* [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)
* [Bitcoin Developer Guide](https://developer.bitcoin.org/devguide/index.html)
* [Bitcoin Core](https://bitcoin.org/en/bitcoin-core/)
* [Bitcoin.org](https://bitcoin.org/)
* [Bitcoin Forum](https://bitcointalk.org/)
* [Bitcoin Stack Exchange](https://bitcoin.stackexchange.com/)